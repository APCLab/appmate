from django.conf import settings
from django.db import models

from bitcoin.rpc import Proxy

__all__ = (
    {% for model in models %}
    '{{ model.name }}',
    {% endfor %}
)


class _UtilMixin(object):
    @classmethod
    def _fields(cls):
        return tuple(f.name for f in cls._meta.fields)

    def __str__(self):
        return 'id: {}'.format(self.id)
{% for model in models %}


class {{ model.name }}(_UtilMixin, models.Model):
    {% for field in model.fields %}
    {{ field.name }} = models.{{ field.type }}({{ field.args | default(field_arg[field.type]) }})
    {% endfor %}
    {% if model.name == 'Customer' %}

    @property
    def b_account(self):
        '''
        Bitcoin Account Address(es)

        This address is used for receiving payment.
        The account name is imei.
        '''
        try:
            rpc = Proxy(settings.BITCOIN_API)
            rpc.getaccountaddress(self.imei)  # create if not exists

            ret = rpc._call('getaddressesbyaccount', self.imei)
        except:
            return None
        return ret

    @property
    def b_utxo(self):
        '''
        List of bitcoin UTXOs
        '''
        try:
            rpc = Proxy(settings.BITCOIN_API)
            utxos = rpc.listunspent(addrs=self.b_account or [])
            ret = [
                {
                    'address': str(utxo['address']),
                    'amount': utxo['amount'],
                    'txid': str(utxo['outpoint']).split(':')[0],
                    'vout': str(utxo['outpoint']).split(':')[-1],
                } for utxo in utxos if utxo['spendable']
            ]
        except:
            return None
        return ret

    @property
    def b_balance(self):
        '''
        Get the account balance
        '''
        addr = self.b_account[0]  # get or create

        try:
            rpc = Proxy(settings.BITCOIN_API)
            balance = rpc.getbalance(self.imei, 0)
            if balance < 5000000000.0:
                rpc._call('generatetoaddress', 1, addr)
            balance = rpc.getbalance(self.imei, 0)
        except:
            return None
        return balance
    {% endif %}
{% endfor %}

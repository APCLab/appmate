from rest_framework import serializers

from app.models import *

__all__ = (
    {% for model in models %}
    '{{ model.name }}Serializer',
    {% endfor %}
)
{% for model in models %}


class {{ model.name }}Serializer(serializers.HyperlinkedModelSerializer):
    {% if model.name == 'Customer' %}
    b_account = serializers.JSONField(read_only=True)
    b_utxo = serializers.JSONField(read_only=True)
    b_balance = serializers.FloatField(read_only=True)

    class Meta:
        model = {{ model.name }}
        fields = {{ model.name }}._fields() + (
            'b_account', 'b_utxo', 'b_balance')
    {% elif model.name == 'Evaluation' %}
    class Meta:
        model = {{ model.name }}
        fields = {{ model.name }}._fields()

    def create(self, validated_data):
        evaluation = super().create(validated_data)

        ql = evaluation.queue_list
        customer = evaluation.queue_list.customer

        data = {
            'score': evaluation.score,
            'saddress': ql.saddress,
            'slongitude': ql.slongitude,
            'slatitude': ql.slatitude,
            'price': ql.price,
            'daddress': ql.daddress,
            'dlongitude': ql.dlongitude,
            'dlatitude': ql.dlatitude,
            'driver': ql.driver.imei
        }
        customer.store_to_block(data)

        return evaluation
    {% else %}
    class Meta:
        model = {{ model.name }}
        fields = {{ model.name }}._fields()
    {% endif %}
{% endfor %}
